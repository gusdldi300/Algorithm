import java.util.*;

class Solution {
    private static class Node {
        private int id;
        private int distance;
        
        public Node(int id, int distance) {
            this.id = id;
            this.distance = distance;
        }
    }
    
    public int solution(int N, int[][] road, int K) {
        LinkedList<Node>[] nodeLists = new LinkedList[N + 1];
        for (int index = 1; index < nodeLists.length; ++index) {
            nodeLists[index] = new LinkedList<>();
        }
        
        for (int i = 0; i < road.length; ++i) {
            LinkedList<Node> nodeList = nodeLists[road[i][0]];
            nodeList.add(new Node(road[i][1], road[i][2]));
            
            nodeList = nodeLists[road[i][1]];
            nodeList.add(new Node(road[i][0], road[i][2]));
        }
        
        HashMap<Integer, Integer> visited = new HashMap<>();
        Node startNode = new Node(1, 0);
        getDeliverableNodesRecursive(startNode, nodeLists, 0, K, visited);

        return visited.size();
    }
    
    private void getDeliverableNodesRecursive(Node node, LinkedList<Node>[] nodeLists, int distance, int maxDistance, HashMap<Integer, Integer> visited) {
        if (visited.containsKey(node.id) && visited.get(node.id) <= distance) {
            //System.out.format("contains Key: %d\n", node.id);
            
            return;
        }    
        
        if (distance > maxDistance) {
            //System.out.format("Node: %d, Over distance: %d\n", node.id, distance);
            
            return;
        }
        
        visited.put(node.id, distance);
        //System.out.format("Node: %d, distance: %d\n", node.id, distance);
        for (Node neighbor : nodeLists[node.id]) {
            getDeliverableNodesRecursive(neighbor, nodeLists, distance + neighbor.distance, maxDistance, visited);
        }
    }
}
